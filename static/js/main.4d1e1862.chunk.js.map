{"version":3,"sources":["store/reducers/StoriesListReducer.js","store/reducers/index.js","App.js","serviceWorker.js","index.js","store/types/index.js"],"names":["initialState","storiesList","searchResults","rootReducer","combineReducers","storiesListReducer","state","action","type","GET_STORIES_LIST","payload","GET_SEARCH_RESULTS","store","createStore","applyMiddleware","thunk","App","Shell","lazy","fallback","style","display","height","alignItems","justifyContent","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ON_ERROR"],"mappings":"k2BACA,IAAMA,EAAe,CACjBC,YAAa,GACbC,cAAe,ICAnB,IAIeC,EAJKC,YAAgB,CAChCC,mBDEW,WAAuD,IAA/BC,EAA8B,uDAAtBN,EAAcO,EAAQ,uCACjE,OAAQA,EAAOC,MACX,KAAKC,IACD,OAAO,EAAP,GACOH,EADP,CAEIL,YAAY,GAAD,mBAAMK,EAAML,aAAZ,CAAyBM,EAAOG,YAEnD,KAAKC,IACD,OAAO,EAAP,GACOL,EADP,CAEIJ,cAAeK,EAAOG,UAE9B,QACI,OAAO,EAAP,GACOJ,OEbfM,EAAQC,YAAYV,EAAaW,YAAgBC,MAqBtCC,MAnBf,WAEE,IAAMC,EAAQC,gBAAK,kBAAM,sDACzB,OACE,kBAAC,WAAD,CACEC,SAAU,yBACRC,MAAO,CAAEC,QAAS,OAAQC,OAAQ,QAASC,WAAY,SAAUC,eAAgB,WADzE,gBAIV,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAUb,MAAOA,GACf,kBAACK,EAAD,UCRUS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MACAC,SAASC,eAAe,SDwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,+BEnInB,sGAAO,IACMC,EAAW,WACXhC,EAAmB,mBACnBE,EAAqB,uB","file":"static/js/main.4d1e1862.chunk.js","sourcesContent":["import { GET_STORIES_LIST, GET_SEARCH_RESULTS } from \"../types\";\nconst initialState = {\n    storiesList: [],\n    searchResults: []\n}\n\nexport default function getStoriesList(state = initialState, action) {\n    switch (action.type) {\n        case GET_STORIES_LIST:\n            return {\n                ...state,\n                storiesList: [...state.storiesList, action.payload]\n            };\n        case GET_SEARCH_RESULTS:\n            return {\n                ...state,\n                searchResults: action.payload\n            }\n        default:\n            return {\n                ...state\n            };\n    }\n};\n","import { combineReducers } from 'redux'\nimport storiesListReducer from './StoriesListReducer';\n\nconst rootReducer = combineReducers({\n    storiesListReducer\n})\n\nexport default rootReducer;\n","import React, { lazy, Suspense } from 'react';\nimport './App.css';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport rootReducer from './store/reducers';\n\nlet store = createStore(rootReducer, applyMiddleware(thunk));\n\nfunction App() {\n\n  const Shell = lazy(() => import('./shell/containers/Shell'));\n  return (\n    <Suspense\n      fallback={<div\n        style={{ display: \"flex\", height: \"100vh\", alignItems: \"center\", justifyContent: \"center\" }}>\n        Loading....\n    </div>}>\n      <div className=\"App\">\n        <Provider store={store}>\n          <Shell />\n        </Provider>\n\n      </div>\n    </Suspense>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n    <App />,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const ON_LOAD = \"ON_LOAD\";\nexport const ON_ERROR = \"ON_ERROR\";\nexport const GET_STORIES_LIST = \"GET_STORIES_LIST\";\nexport const GET_SEARCH_RESULTS = \"GET_SEARCH_RESULTS\";"],"sourceRoot":""}